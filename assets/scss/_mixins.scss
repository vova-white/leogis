@import '~bootstrap/scss/_functions.scss';
@import '~bootstrap/scss/_variables.scss';
@import '~bootstrap/scss/_mixins.scss';

@mixin emLh($lh, $fs) {
  line-height: $lh/$fs * 1em;
}

@mixin remFs($fs) {
  font-size: $fs * 1px;
  font-size: $fs/$basicFontSize * 1rem;
}

$resolution-default: 2 !default;
$resolution-presets: (
  'ldpi' 75%,
  'mdpi' 100%,
  'hdpi' 150%,
  'xhdpi' 200%,
  'xxhdpi' 300%,
  'xxxhdpi' 400%,
  'retina' 2,
  '@2x' 2,
  '@3x' 3
) !default;

@function resolution-preset($resolution) {
  @if type-of($resolution) == 'string' {
    @each $preset in $resolution-presets {
      @if nth($preset, 1) == $resolution {
        @return nth($preset, 2);
      }
    }
  }
  @return $resolution;
}

@mixin resolution($resolution: $resolution-default) {
  $resolution: resolution-preset($resolution);
  @if type-of($resolution) == 'number' {
    @if unit($resolution) == 'dpi' {
      $resolution: $resolution / 96dpi;
    } @else if unit($resolution) == '%' {
      $resolution: $resolution / 100%;
    } @else {
      $resolution: $resolution / ($resolution * 0 + 1);
    }
    @media (-webkit-min-device-pixel-ratio: #{$resolution}), (min-resolution: #{$resolution * 96dpi}) {
      @content;
    }
  } @else {
    @error "#{$resolution} is not a valid resolution or preset";
  }
}

@function resolution-preset($resolution) {
  @if type-of($resolution) == 'string' {
    @each $preset in $resolution-presets {
      @if nth($preset, 1) == $resolution {
        @return nth($preset, 2);
      }
    }
  }
  @return $resolution;
}

@function width-scalable($px, $width: $mobile-width, $unit: 'vw') {
  @if $unit == '%' {
    @return $px/$width * 100%;
  } @else if $unit == 'vw' {
    @return $px/$width * 100vw;
  } @else {
    @return $px/$width * 100vh;
  }
}

@mixin tracking($value) {
  letter-spacing: $value / 1000 * 1em;
}
